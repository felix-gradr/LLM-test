[
  "Here are three high-impact, bite-sized tasks to rapidly bootstrap a primitive error-logging system across the repo:",
  "Create a centralized error-logging module",
  "Add a new file `error_logger.py` at the repo root",
  "In it, configure Python\u2019s `logging` to write ERROR-level (and above) messages with timestamps and stack traces into a file like `error.log`",
  "Provide an `init_logging()` function that sets up both a file handler and a console handler",
  "Wire up logging in your main agent (`root.py`)",
  "At the very top of `root.py`, import and call `error_logger.init_logging()`",
  "Wrap the main execution entrypoint (whatever drives coder.apply_task or similar) in a try/except that catches any Exception and does `logger.exception(...)` before continuing or exiting gracefully",
  "Ensure that even if something else blows up, you\u2019ll get a stack trace in `error.log`",
  "Add fallback-agent error trapping",
  "In `fallback.py`, import the same `error_logger` and call `init_logging()` early",
  "Encase the fallback agent\u2019s core logic in try/except, logging any unexpected exception via `logger.exception()`",
  "This ensures that even your safety net logs its own failures, so nothing ever fails silently"
]