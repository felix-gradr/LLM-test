[
  "Here are three small, high-leverage chores that will substantially harden your system and guard against complete failure:",
  "\u201cCreate a minimal `error_logger` stub module\u201d",
  "Add a new file `error_logger.py` that defines a simple logger (e.g. catches and writes stack traces to disk)",
  "Have it expose at least one function (e.g. `log_exception(exc: Exception) -> None`) so that any missing\u2010module errors in `root.py` can\u2019t blow up the process",
  "\u201cWrap the top\u2010level entry in `root.py` in a universal try/except\u201d",
  "Modify `root.py` (the code that runs under `if __name__=='__main__':`) so that all exceptions are caught, passed to `error_logger.log_exception()`, and then handed off to your fallback agent",
  "This ensures `python -m root` never crashes outright",
  "\u201cAdd an automated sanity check in your fallback agent\u201d",
  "In `fallback.py` (or wherever you dispatch to fallback), before attempting any LLM work, run `compileall.compile_dir(...)`",
  "If there are syntax errors, immediately restore from the most recent backup and log the incident, then proceed",
  "This closes the loop: any broken commit triggers a rollback and still makes \u201cintelligent progress.\u201d"
]