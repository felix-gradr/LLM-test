[
  "Here are three small, high-leverage tasks you can tackle next to drive the system forward:",
  "\u201cTask-Planner\u201d Module",
  "\u2022 Create a new Python module (e.g. `planner.py`) that:",
  "\u2013 Reads in `goal.md` and a short snapshot of the current codebase",
  "\u2013 Calls the LLM (using your existing `chat_completion` helper) to generate 3\u20135 specific, prioritized sub-tasks that will advance the PRIMARY goal (\u201cnever get stuck\u201d) and SECONDARY goal (\u201cself-improvement\u201d)",
  "\u2013 Appends those tasks to `pending_tasks.md` in timestamped form",
  "Impact: Automates the generation of actionable next steps so the agent always has something intelligent to work on",
  "Robust Fallback Invocation in `root.py`",
  "\u2022 Modify your `root.py` entrypoint (or create it if missing) so that:",
  "\u2013 All agent actions (planning, coding, etc.) are wrapped in a try/except",
  "\u2013 On any uncaught exception or unhelpful LLM outcome, it automatically shells out to `fallback.py` to recover",
  "\u2013 Logs which errors triggered the fallback and what recovery steps were taken",
  "Impact: Guarantees the system never fully crashes or stalls, satisfying the \u201calways make progress\u201d requirement",
  "Self-Improvement Feedback Loop",
  "\u2022 After each code change (i.e., immediately after running `apply_task`), run a quick static analysis pass (e.g., via `compileall` plus a simple linter stub)",
  "\u2022 Feed any warnings/errors back into the LLM with a prompt like:",
  "\u201cHere\u2019s the diff you just applied and the static/lint feedback\u2014please suggest 2\u20133 immediate refactorings or improvements to increase code robustness.\u201d",
  "\u2022 Write those suggestions to a new file `self_improvement.md`",
  "Impact: Creates a live feedback loop so the agent continually critiques and improves its own output"
]