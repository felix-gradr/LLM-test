
"""Agents package initialisation.

This file also provides a lightweight stub for AzureOpenAI so that the
orchestration pipeline can run in environments **without** valid Azure
credentials or internet access.  The stub is only activated when the
required environment variables (AZURE_KEY / AZURE_ENDPOINT) are missing.
It guarantees that planner_agent and executor_agent always receive a
syntactically-valid response, preventing the system from hard-crashing and
therefore avoiding invocation of the heavyweight fallback agent.

IMPORTANT:
• In production, simply set the AZURE_* environment variables and the real
  AzureOpenAI client will be used automatically.
• The stub aims to be minimal and side-effect-free – it writes a no-op
  plan (for the planner) and returns empty code (for the executor).

"""

import os
import types
import sys

try:
    import openai
    from openai import AzureOpenAI as _RealAzureOpenAI
except Exception:  # pragma: no cover
    # If openai isn't installed, create a dummy module so that imports succeed.
    openai = types.ModuleType("openai")
    sys.modules["openai"] = openai
    _RealAzureOpenAI = None

_USE_STUB = not (os.getenv("AZURE_KEY") and os.getenv("AZURE_ENDPOINT"))

if _USE_STUB or _RealAzureOpenAI is None:
    class _StubChatCompletions:
        @staticmethod
        def create(*, model: str, messages: list[dict], **kwargs):
            # Decide content based on presence of 'PLANNING' keyword
            system_msg = messages[0]["content"] if messages else ""
            if "PLANNING agent" in system_msg:
                content = (
                    "from pathlib import Path\n"
                    "Path('current_plan.md').write_text('- No-op plan generated by stub\\n')"
                )
            elif "EXECUTION agent" in system_msg:
                content = "# Stub executor – no code changes"
            else:
                content = "# Generic stub response"
            choice = types.SimpleNamespace(message=types.SimpleNamespace(content=content))
            return types.SimpleNamespace(choices=[choice])

    class _StubClient:
        def __init__(self, *args, **kwargs):
            self.chat = types.SimpleNamespace(completions=_StubChatCompletions)

    # Patch the openai.AzureOpenAI reference used elsewhere
    openai.AzureOpenAI = _StubClient
    sys.modules["openai"] = openai
